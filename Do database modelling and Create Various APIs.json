{"\ufeffDo database modelling and Create Various APIs\n\n\n\n\n\n\n\n\n\n\n\n\nTEAM MEMBERS: \n      ASIF FAROOK.K (211520205016)  (GITHUB ID: https://github.com/ASIF10504)\n      \n      ARSHAT AHAMED RAFIQ A.S (211520205015)(GITHUB ID: https://github.com/AGTAHAMED)\nReason 1: Tight coupling between API and database model.\nA database model is specific to how you store your data in the underlying database. Web APIs are how clients or other consumers should experience your application. You don\u2019t want change in your data model to impact your Web API clients. They should be hidden from the underlying implementation changes that happen in your data model. Clients need to work with stable Web APIs so that they don\u2019t have to change every time you change your data model. With the data model exposed all clients are now coupled with the underlying data model. A good web API encapsulates the data model as it is considered an implementation detail. When you start having a separate data model and Web API model might feel redundant work but over time it shows its value and makes two layers evolve independently.\u00a0\n> Although not directly linked to this point, I prefer to create an Anti-corruption layer when I consume external APIs. Anti-corruption layer. prevents a downstream system/service domain model from polluting the domain model of a new service. Anti-corruption layer is a concept from Domain-driven design. I covered this point in detail in a\u00a0post\u00a0I wrote about Pass-through services.\nReason 2: You don\u2019t want to or you should not expose all the database fields.\nIf you expose your database model as Web API then you risk sharing sensitive fields like passwords, tokens in the API response. Even if you don\u2019t do that there are many fields which you don\u2019t need to share with the client. These are fields like updated timestamp, who updated, version fields, etc. Apart from the security issue related with sharing sensitive data there is also performance cost associated with sending extra data.\u00a0\nAnother point is when you use an ORM framework like Hibernate(in Java) then with bidirectional OneToMany or ManyToMany relationships you will get exceptions when you serialize the object graph to JSON. This is because of cyclic nature. You will have to use framework specific hacks like in Jackson you will have to use JsonBackReference to avoid these. Now, your entities start getting polluted with your web API concerns.\u00a0\nThe best way to not get into this mess is to have separate models for web APIs and the database.\nReason 3: The need for aggregated APIs.\nMost of the time when designing web APIs you just don\u2019t want details about a specific entity you might also want related entities as well. For example, when you make a GET call to get details about a specific Github repository you get the following response. Refer to Github REST API\u00a0documentation. I have removed fields and nested objects for brevity.\n{\n    \"id\": 1296269,\n    \"name\": \"Hello-World\",\n    \"full_name\": \"octocat/Hello-World\",\n    \"owner\": {\n        \"login\": \"octocat\",\n        \"id\": 1,\n        \"url\": \"https://api.github.com/users/octocat\",\n    },\n    \"private\": false,\n    \"html_url\": \"https://github.com/octocat/Hello-World\",\n    \"description\": \"This your first repo!\",\n    \"fork\": false,\n    \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n    \"forks_count\": 9,\n    \"forks\": 9,\n    \"stargazers_count\": 80,\n    \"watchers_count\": 80,\n    \"watchers\": 80,\n    \"size\": 108,\n    \"default_branch\": \"master\",\n    \"open_issues_count\": 0,\n    \"open_issues\": 0,\n    \"is_template\": false,\n    \"topics\": [\n        \"octocat\",\n        \"atom\",\n        \"electron\",\n        \"api\"\n    ],\n    \"template_repository\": {\n        \"id\": 1296269,\n        \"name\": \"Hello-World-Template\",\n        \"full_name\": \"octocat/Hello-World-Template\",\n        \"owner\": {\n            \"login\": \"octocat\",\n            \"id\": 1\n        },\n        \"private\": false,\n        \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\n        \"description\": \"This your first repo!\"\n    },\n    \"license\": {\n        \"key\": \"mit\",\n        \"name\": \"MIT License\",\n        \"spdx_id\": \"MIT\",\n        \"url\": \"https://api.github.com/licenses/mit\",\n        \"node_id\": \"MDc6TGljZW5zZW1pdA": null}